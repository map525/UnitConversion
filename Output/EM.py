#################################################################################
#2345678901234567890123456789012345678901234567890123456789012345678901234567890
#################################################################################
# PROJECT: Unit Conversion
#
# Copyright Copyright 2024 MAP
#
# Unpublished - Rights reserved under the Copyright Laws of the United States
#
#################################################################################
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#
#################################################################################
#
# File EM.py
#
# Units for EM
#
# Class for EM units.
#
# Auto Generated: DO NOT Modify.
#
# Version: "1.0"
#
#################################################################################

from UnitConversion import UBASE
from UnitConversion import SingleSystem
from UnitConversion import BaseSystem

class EM(SingleSystem.SingleSystem):

    __instance = None

    @staticmethod 
    def Instance():
        """ Static access method. """
        if EM.__instance == None:
            EM.__instance = EM()
        return EM.__instance

    def __new__(self):
       if EM.__instance == None:
           EM.__instance = super(EM, self).__new__(self)

       return  EM.__instance
    def __init__(self):
        super().__init__()
        unit = dict()

        unit.update({"cgs[abampere]": UBASE.UBASE("cgs", "abampere", 1.000000000000000E+01, "A", "I", "1.0")})
        unit.update({"cgs[aA]": UBASE.UBASE("cgs", "abampere", 1.000000000000000E+01, "A", "I", "1.0")})
        unit.update({"IEUS[ampere]": UBASE.UBASE("IEUS", "ampere", 9.998350000000000E-01, "A", "I", "1.0")})
        unit.update({"INT[ampere]": UBASE.UBASE("INT", "ampere", 9.998350000000000E-01, "A", "I", "1.0")})
        unit.update({"MKSA[ampere]": UBASE.UBASE("MKSA", "ampere", 1.000000000000000E+00, "A", "I", "1.0")})
        unit.update({"MKSA[A]": UBASE.UBASE("MKSA", "ampere", 1.000000000000000E+00, "A", "I", "1.0")})
        unit.update({"SI[ampere]": UBASE.UBASE("SI", "ampere", 1.000000000000000E+00, "A", "I", "1.0")})
        unit.update({"SI[A]": UBASE.UBASE("SI", "ampere", 1.000000000000000E+00, "A", "I", "1.0")})
        unit.update({"IEUS[ampere(mean)]": UBASE.UBASE("IEUS", "ampere(mean)", 9.998500000000000E-01, "A", "I", "1.0")})
        unit.update({"INT[ampere(mean)]": UBASE.UBASE("INT", "ampere(mean)", 9.998500000000000E-01, "A", "I", "1.0")})
        unit.update({"SI[ampere-tum]": UBASE.UBASE("SI", "ampere-tum", 1.000000000000000E+00, "A", "I", "1.0")})
        unit.update({"SI[A-turn]": UBASE.UBASE("SI", "ampere-tum", 1.000000000000000E+00, "A", "I", "1.0")})
        unit.update({"SI[At]": UBASE.UBASE("SI", "ampere-tum", 1.000000000000000E+00, "A", "I", "1.0")})
        unit.update({"a.u.[au-of-electric-curent]": UBASE.UBASE("a.u.", "au-of-electric-curent", 6.623618237495840E-03, "A", "I", "1.0")})
        unit.update({"a.u.[auec]": UBASE.UBASE("a.u.", "au-of-electric-curent", 6.623618237495840E-03, "A", "I", "1.0")})
        unit.update({"cgs[biot]": UBASE.UBASE("cgs", "biot", 1.000000000000000E+01, "A", "I", "1.0")})
        unit.update({"cgs[Bi]": UBASE.UBASE("cgs", "biot", 1.000000000000000E+01, "A", "I", "1.0")})
        unit.update({"cgs[emu-of-current]": UBASE.UBASE("cgs", "emu-of-current", 1.000000000000000E+01, "A", "I", "1.0")})
        unit.update({"cgs[emuc]": UBASE.UBASE("cgs", "emu-of-current", 1.000000000000000E+01, "A", "I", "1.0")})
        unit.update({"Scientific[galvat]": UBASE.UBASE("Scientific", "galvat", 1.000000000000000E+00, "A", "I", "1.0")})
        unit.update({"cgs[gilbert]": UBASE.UBASE("cgs", "gilbert", 7.957747154594770E-01, "A", "I", "1.0")})
        unit.update({"cgs[Gb]": UBASE.UBASE("cgs", "gilbert", 7.957747154594770E-01, "A", "I", "1.0")})
        unit.update({"Scientific[pragilbert]": UBASE.UBASE("Scientific", "pragilbert", 1.256637061435920E+01, "A", "I", "1.0")})
        unit.update({"cgs[statampere]": UBASE.UBASE("cgs", "statampere", 3.335640951981520E-10, "A", "I", "1.0")})
        unit.update({"cgs[statA]": UBASE.UBASE("cgs", "statampere", 3.335640951981520E-10, "A", "I", "1.0")})
        self._map.update({"current": BaseSystem.BaseSystem("current", unit, "1.0")})

        unit.clear()


        unit.update({"cgs[abcoulomb]": UBASE.UBASE("cgs", "abcoulomb", 1.000000000000000E+01, "s.A", "T.I", "1.0")})
        unit.update({"cgs[aC]": UBASE.UBASE("cgs", "abcoulomb", 1.000000000000000E+01, "s.A", "T.I", "1.0")})
        unit.update({"SI[ampere-hour]": UBASE.UBASE("SI", "ampere-hour", 3.600000000000000E+03, "s.A", "T.I", "1.0")})
        unit.update({"SI[A-hr]": UBASE.UBASE("SI", "ampere-hour", 3.600000000000000E+03, "s.A", "T.I", "1.0")})
        unit.update({"a.u.[au-of-electric-charge]": UBASE.UBASE("a.u.", "au-of-electric-charge", 1.602176634000000E-19, "s.A", "T.I", "1.0")})
        unit.update({"a.u.[aue]": UBASE.UBASE("a.u.", "au-of-electric-charge", 1.602176634000000E-19, "s.A", "T.I", "1.0")})
        unit.update({"SI[coulomb]": UBASE.UBASE("SI", "coulomb", 1.000000000000000E+00, "s.A", "T.I", "1.0")})
        unit.update({"SI[C]": UBASE.UBASE("SI", "coulomb", 1.000000000000000E+00, "s.A", "T.I", "1.0")})
        unit.update({"IEUS[coulomb(int)]": UBASE.UBASE("IEUS", "coulomb(int)", 1.000165000220600E+00, "s.A", "T.I", "1.0")})
        unit.update({"IEUS[C]": UBASE.UBASE("IEUS", "coulomb(int)", 1.000165000220600E+00, "s.A", "T.I", "1.0")})
        unit.update({"cgs[emu-of-charge]": UBASE.UBASE("cgs", "emu-of-charge", 1.000000000000000E+01, "s.A", "T.I", "1.0")})
        unit.update({"cgs[esu-of-charge]": UBASE.UBASE("cgs", "esu-of-charge", 3.335640951981520E-10, "s.A", "T.I", "1.0")})
        unit.update({"cgs[franklin]": UBASE.UBASE("cgs", "franklin", 3.335640951981520E-10, "s.A", "T.I", "1.0")})
        unit.update({"cgs[Fr]": UBASE.UBASE("cgs", "franklin", 3.335640951981520E-10, "s.A", "T.I", "1.0")})
        unit.update({"cgs[statcoulomb]": UBASE.UBASE("cgs", "statcoulomb", 3.335640951981520E-10, "s.A", "T.I", "1.0")})
        unit.update({"cgs[statC]": UBASE.UBASE("cgs", "statcoulomb", 3.335640951981520E-10, "s.A", "T.I", "1.0")})
        unit.update({"SI[yottacoulomb]": UBASE.UBASE("SI", "yottacoulomb", 1.000000000000000E+24, "s.A", "T.I", "1.0")})
        unit.update({"SI[YC]": UBASE.UBASE("SI", "yottacoulomb", 1.000000000000000E+24, "s.A", "T.I", "1.0")})
        unit.update({"SI[zettacoulomb]": UBASE.UBASE("SI", "zettacoulomb", 1.000000000000000E+21, "s.A", "T.I", "1.0")})
        unit.update({"SI[ZC]": UBASE.UBASE("SI", "zettacoulomb", 1.000000000000000E+21, "s.A", "T.I", "1.0")})
        unit.update({"SI[exacoulomb]": UBASE.UBASE("SI", "exacoulomb", 1.000000000000000E+18, "s.A", "T.I", "1.0")})
        unit.update({"SI[EC]": UBASE.UBASE("SI", "exacoulomb", 1.000000000000000E+18, "s.A", "T.I", "1.0")})
        unit.update({"SI[petacoulomb]": UBASE.UBASE("SI", "petacoulomb", 1.000000000000000E+15, "s.A", "T.I", "1.0")})
        unit.update({"SI[PC]": UBASE.UBASE("SI", "petacoulomb", 1.000000000000000E+15, "s.A", "T.I", "1.0")})
        unit.update({"SI[teracoulomb]": UBASE.UBASE("SI", "teracoulomb", 1.000000000000000E+12, "s.A", "T.I", "1.0")})
        unit.update({"SI[TC]": UBASE.UBASE("SI", "teracoulomb", 1.000000000000000E+12, "s.A", "T.I", "1.0")})
        unit.update({"SI[gigacoulomb]": UBASE.UBASE("SI", "gigacoulomb", 1.000000000000000E+09, "s.A", "T.I", "1.0")})
        unit.update({"SI[GC]": UBASE.UBASE("SI", "gigacoulomb", 1.000000000000000E+09, "s.A", "T.I", "1.0")})
        unit.update({"SI[megacoulomb]": UBASE.UBASE("SI", "megacoulomb", 1.000000000000000E+06, "s.A", "T.I", "1.0")})
        unit.update({"SI[MC]": UBASE.UBASE("SI", "megacoulomb", 1.000000000000000E+06, "s.A", "T.I", "1.0")})
        unit.update({"SI[kilocoulomb]": UBASE.UBASE("SI", "kilocoulomb", 1.000000000000000E+03, "s.A", "T.I", "1.0")})
        unit.update({"SI[kC]": UBASE.UBASE("SI", "kilocoulomb", 1.000000000000000E+03, "s.A", "T.I", "1.0")})
        unit.update({"SI[hectocoulomb]": UBASE.UBASE("SI", "hectocoulomb", 1.000000000000000E+02, "s.A", "T.I", "1.0")})
        unit.update({"SI[hC]": UBASE.UBASE("SI", "hectocoulomb", 1.000000000000000E+02, "s.A", "T.I", "1.0")})
        unit.update({"SI[decacoulomb]": UBASE.UBASE("SI", "decacoulomb", 1.000000000000000E+01, "s.A", "T.I", "1.0")})
        unit.update({"SI[daC]": UBASE.UBASE("SI", "decacoulomb", 1.000000000000000E+01, "s.A", "T.I", "1.0")})
        unit.update({"SI[decicoulomb]": UBASE.UBASE("SI", "decicoulomb", 1.000000000000000E-01, "s.A", "T.I", "1.0")})
        unit.update({"SI[dC]": UBASE.UBASE("SI", "decicoulomb", 1.000000000000000E-01, "s.A", "T.I", "1.0")})
        unit.update({"SI[centicoulomb]": UBASE.UBASE("SI", "centicoulomb", 1.000000000000000E-02, "s.A", "T.I", "1.0")})
        unit.update({"SI[cC]": UBASE.UBASE("SI", "centicoulomb", 1.000000000000000E-02, "s.A", "T.I", "1.0")})
        unit.update({"SI[millicoulomb]": UBASE.UBASE("SI", "millicoulomb", 1.000000000000000E-03, "s.A", "T.I", "1.0")})
        unit.update({"SI[mC]": UBASE.UBASE("SI", "millicoulomb", 1.000000000000000E-03, "s.A", "T.I", "1.0")})
        unit.update({"SI[microcoulomb]": UBASE.UBASE("SI", "microcoulomb", 1.000000000000000E-06, "s.A", "T.I", "1.0")})
        unit.update({"SI[uC]": UBASE.UBASE("SI", "microcoulomb", 1.000000000000000E-06, "s.A", "T.I", "1.0")})
        unit.update({"SI[nanocoulomb]": UBASE.UBASE("SI", "nanocoulomb", 1.000000000000000E-09, "s.A", "T.I", "1.0")})
        unit.update({"SI[nC]": UBASE.UBASE("SI", "nanocoulomb", 1.000000000000000E-09, "s.A", "T.I", "1.0")})
        unit.update({"SI[picocoulomb]": UBASE.UBASE("SI", "picocoulomb", 1.000000000000000E-12, "s.A", "T.I", "1.0")})
        unit.update({"SI[pC]": UBASE.UBASE("SI", "picocoulomb", 1.000000000000000E-12, "s.A", "T.I", "1.0")})
        unit.update({"SI[femtocoulomb]": UBASE.UBASE("SI", "femtocoulomb", 1.000000000000000E-15, "s.A", "T.I", "1.0")})
        unit.update({"SI[fC]": UBASE.UBASE("SI", "femtocoulomb", 1.000000000000000E-15, "s.A", "T.I", "1.0")})
        unit.update({"SI[attocoulomb]": UBASE.UBASE("SI", "attocoulomb", 1.000000000000000E-18, "s.A", "T.I", "1.0")})
        unit.update({"SI[aC]": UBASE.UBASE("SI", "attocoulomb", 1.000000000000000E-18, "s.A", "T.I", "1.0")})
        unit.update({"SI[zeptocoulomb]": UBASE.UBASE("SI", "zeptocoulomb", 1.000000000000000E-21, "s.A", "T.I", "1.0")})
        unit.update({"SI[zC]": UBASE.UBASE("SI", "zeptocoulomb", 1.000000000000000E-21, "s.A", "T.I", "1.0")})
        unit.update({"SI[yoctocoulomb]": UBASE.UBASE("SI", "yoctocoulomb", 1.000000000000000E-24, "s.A", "T.I", "1.0")})
        unit.update({"SI[yC]": UBASE.UBASE("SI", "yoctocoulomb", 1.000000000000000E-24, "s.A", "T.I", "1.0")})
        self._map.update({"charge": BaseSystem.BaseSystem("charge", unit, "1.0")})

        unit.clear()


        unit.update({"SI[ampere-per-meter]": UBASE.UBASE("SI", "ampere-per-meter", 1.000000000000000E+00, "A/m", "I/L", "1.0")})
        unit.update({"SI[A/m]": UBASE.UBASE("SI", "ampere-per-meter", 1.000000000000000E+00, "A/m", "I/L", "1.0")})
        unit.update({"Scientific[lenz]": UBASE.UBASE("Scientific", "lenz", 1.000000000000000E+00, "A/m", "I/L", "1.0")})
        unit.update({"cgs[oersted]": UBASE.UBASE("cgs", "oersted", 7.957747154594770E+01, "A/m", "I/L", "1.0")})
        unit.update({"cgs[CE]": UBASE.UBASE("cgs", "oersted", 7.957747154594770E+01, "A/m", "I/L", "1.0")})
        unit.update({"cgs[ce]": UBASE.UBASE("cgs", "oersted", 7.957747154594770E+01, "A/m", "I/L", "1.0")})
        unit.update({"Scientific[praoersted]": UBASE.UBASE("Scientific", "praoersted", 1.256637061435920E+01, "A/m", "I/L", "1.0")})
        self._map.update({"magneticFieldStrength": BaseSystem.BaseSystem("magneticFieldStrength", unit, "1.0")})

        unit.clear()


        unit.update({"US[perm(0oC)]": UBASE.UBASE("US", "perm(0oC)", 5.721357883888630E-11, "s/m", "T/L", "1.0")})
        unit.update({"US[perm(23oC)]": UBASE.UBASE("US", "perm(23oC)", 5.745608053073760E-11, "s/m", "T/L", "1.0")})
        self._map.update({"permeability": BaseSystem.BaseSystem("permeability", unit, "1.0")})

        unit.clear()


        unit.update({"SI[ampere-square-meter]": UBASE.UBASE("SI", "ampere-square-meter", 1.000000000000000E+00, "m2.A", "L2.I", "1.0")})
        unit.update({"SI[A-m2]": UBASE.UBASE("SI", "ampere-square-meter", 1.000000000000000E+00, "m2.A", "L2.I", "1.0")})
        unit.update({"a.u.[au-of-magnetic-dipole-moment]": UBASE.UBASE("a.u.", "au-of-magnetic-dipole-moment", 1.854802015672430E-23, "m2.A", "L2.I", "1.0")})
        unit.update({"a.u.[audpm]": UBASE.UBASE("a.u.", "au-of-magnetic-dipole-moment", 1.854802015672430E-23, "m2.A", "L2.I", "1.0")})
        unit.update({"Scientific[magneton(bohr)]": UBASE.UBASE("Scientific", "magneton(bohr)", 9.274010078362160E-24, "m2.A", "L2.I", "1.0")})
        unit.update({"Scientific[uB]": UBASE.UBASE("Scientific", "magneton(bohr)", 9.274010078362160E-24, "m2.A", "L2.I", "1.0")})
        unit.update({"Scientific[B]": UBASE.UBASE("Scientific", "magneton(bohr)", 9.274010078362160E-24, "m2.A", "L2.I", "1.0")})
        unit.update({"Scientific[bohr-magneton]": UBASE.UBASE("Scientific", "bohr-magneton", 9.274010078362160E-24, "m2.A", "L2.I", "1.0")})
        unit.update({"Scientific[magneton(nuclear)]": UBASE.UBASE("Scientific", "magneton(nuclear)", 5.050783746096370E-27, "m2.A", "L2.I", "1.0")})
        unit.update({"Scientific[uN]": UBASE.UBASE("Scientific", "magneton(nuclear)", 5.050783746096370E-27, "m2.A", "L2.I", "1.0")})
        unit.update({"Scientific[BN]": UBASE.UBASE("Scientific", "magneton(nuclear)", 5.050783746096370E-27, "m2.A", "L2.I", "1.0")})
        unit.update({"Scientific[nuclear-magneton]": UBASE.UBASE("Scientific", "nuclear-magneton", 5.050783746096370E-27, "m2.A", "L2.I", "1.0")})
        self._map.update({"magneticDipoleMoment": BaseSystem.BaseSystem("magneticDipoleMoment", unit, "1.0")})

        unit.clear()


        unit.update({"Imperial[ampere-per-square-inch]": UBASE.UBASE("Imperial", "ampere-per-square-inch", 1.550003100006200E+03, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[A/in2]": UBASE.UBASE("Imperial", "ampere-per-square-inch", 1.550003100006200E+03, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[ampere-per-square-foot]": UBASE.UBASE("Imperial", "ampere-per-square-foot", 1.076391041670970E+01, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[A/ft2]": UBASE.UBASE("Imperial", "ampere-per-square-foot", 1.076391041670970E+01, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[ampere-per-square-yard]": UBASE.UBASE("Imperial", "ampere-per-square-yard", 1.195990046301080E+00, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[A/yd2]": UBASE.UBASE("Imperial", "ampere-per-square-yard", 1.195990046301080E+00, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[milliampere-per-square-inch]": UBASE.UBASE("Imperial", "milliampere-per-square-inch", 1.550003100006200E+00, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[mA/in2]": UBASE.UBASE("Imperial", "milliampere-per-square-inch", 1.550003100006200E+00, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[milliampere-per-square-foot]": UBASE.UBASE("Imperial", "milliampere-per-square-foot", 1.076391041670970E-02, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[mA/ft2]": UBASE.UBASE("Imperial", "milliampere-per-square-foot", 1.076391041670970E-02, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[milliampere-per-square-yard]": UBASE.UBASE("Imperial", "milliampere-per-square-yard", 1.195990046301080E-03, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[mA/yd2]": UBASE.UBASE("Imperial", "milliampere-per-square-yard", 1.195990046301080E-03, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[microampere-per-square-inch]": UBASE.UBASE("Imperial", "microampere-per-square-inch", 1.550003100006200E-03, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[uA/in2]": UBASE.UBASE("Imperial", "microampere-per-square-inch", 1.550003100006200E-03, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[microampere-per-square-foot]": UBASE.UBASE("Imperial", "microampere-per-square-foot", 1.076391041670970E-05, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[uA/ft2]": UBASE.UBASE("Imperial", "microampere-per-square-foot", 1.076391041670970E-05, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[microampere-per-square-yard]": UBASE.UBASE("Imperial", "microampere-per-square-yard", 1.195990046301080E-06, "A/m2", "I/L2", "1.0")})
        unit.update({"Imperial[uA/yd2]": UBASE.UBASE("Imperial", "microampere-per-square-yard", 1.195990046301080E-06, "A/m2", "I/L2", "1.0")})
        unit.update({"SI[ampere-per-square-meter]": UBASE.UBASE("SI", "ampere-per-square-meter", 1.000000000000000E+00, "A/m2", "I/L2", "1.0")})
        unit.update({"SI[A/m2]": UBASE.UBASE("SI", "ampere-per-square-meter", 1.000000000000000E+00, "A/m2", "I/L2", "1.0")})
        unit.update({"SI[ampere-per-square-decimeter]": UBASE.UBASE("SI", "ampere-per-square-decimeter", 1.000000000000000E+02, "A/m2", "I/L2", "1.0")})
        unit.update({"SI[A/dm2]": UBASE.UBASE("SI", "ampere-per-square-decimeter", 1.000000000000000E+02, "A/m2", "I/L2", "1.0")})
        unit.update({"SI[ampere-per-square-centimeter]": UBASE.UBASE("SI", "ampere-per-square-centimeter", 1.000000000000000E+04, "A/m2", "I/L2", "1.0")})
        unit.update({"SI[A/cm2]": UBASE.UBASE("SI", "ampere-per-square-centimeter", 1.000000000000000E+04, "A/m2", "I/L2", "1.0")})
        unit.update({"SI[ampere-per-square-millimeter]": UBASE.UBASE("SI", "ampere-per-square-millimeter", 1.000000000000000E+06, "A/m2", "I/L2", "1.0")})
        unit.update({"SI[A/mm2]": UBASE.UBASE("SI", "ampere-per-square-millimeter", 1.000000000000000E+06, "A/m2", "I/L2", "1.0")})
        unit.update({"SI[ampere-per-square-micrometer]": UBASE.UBASE("SI", "ampere-per-square-micrometer", 1.000000000000000E+12, "A/m2", "I/L2", "1.0")})
        unit.update({"SI[A/um2]": UBASE.UBASE("SI", "ampere-per-square-micrometer", 1.000000000000000E+12, "A/m2", "I/L2", "1.0")})
        unit.update({"SI[ampere-per-square-nanometer]": UBASE.UBASE("SI", "ampere-per-square-nanometer", 1.000000000000000E+18, "A/m2", "I/L2", "1.0")})
        unit.update({"SI[A/nm2]": UBASE.UBASE("SI", "ampere-per-square-nanometer", 1.000000000000000E+18, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[milliampere-per-square-meter]": UBASE.UBASE("Scientific", "milliampere-per-square-meter", 1.000000000000000E-03, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[mA/m2]": UBASE.UBASE("Scientific", "milliampere-per-square-meter", 1.000000000000000E-03, "A/m2", "I/L2", "1.0")})
        unit.update({"SI[milliampere-per-square-decimeter]": UBASE.UBASE("SI", "milliampere-per-square-decimeter", 1.000000000000000E-01, "A/m2", "I/L2", "1.0")})
        unit.update({"SI[mA/dm2]": UBASE.UBASE("SI", "milliampere-per-square-decimeter", 1.000000000000000E-01, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[milliampere-per-square-centimeter]": UBASE.UBASE("Scientific", "milliampere-per-square-centimeter", 1.000000000000000E+01, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[mA/cm2]": UBASE.UBASE("Scientific", "milliampere-per-square-centimeter", 1.000000000000000E+01, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[milliampere-per-square-millimeter]": UBASE.UBASE("Scientific", "milliampere-per-square-millimeter", 1.000000000000000E+03, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[mA/mm2]": UBASE.UBASE("Scientific", "milliampere-per-square-millimeter", 1.000000000000000E+03, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[milliampere-per-square-micrometer]": UBASE.UBASE("Scientific", "milliampere-per-square-micrometer", 1.000000000000000E+09, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[mA/um2]": UBASE.UBASE("Scientific", "milliampere-per-square-micrometer", 1.000000000000000E+09, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[milliampere-per-square-nanometer]": UBASE.UBASE("Scientific", "milliampere-per-square-nanometer", 1.000000000000000E+15, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[mA/nm2]": UBASE.UBASE("Scientific", "milliampere-per-square-nanometer", 1.000000000000000E+15, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[microampere-per-square-meter]": UBASE.UBASE("Scientific", "microampere-per-square-meter", 1.000000000000000E-06, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[uA/m2]": UBASE.UBASE("Scientific", "microampere-per-square-meter", 1.000000000000000E-06, "A/m2", "I/L2", "1.0")})
        unit.update({"SI[microampere-per-square-decimeter]": UBASE.UBASE("SI", "microampere-per-square-decimeter", 1.000000000000000E-04, "A/m2", "I/L2", "1.0")})
        unit.update({"SI[uA/dm2]": UBASE.UBASE("SI", "microampere-per-square-decimeter", 1.000000000000000E-04, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[microampere-per-square-centimeter]": UBASE.UBASE("Scientific", "microampere-per-square-centimeter", 1.000000000000000E-02, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[uA/cm2]": UBASE.UBASE("Scientific", "microampere-per-square-centimeter", 1.000000000000000E-02, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[microampere-per-square-millimeter]": UBASE.UBASE("Scientific", "microampere-per-square-millimeter", 1.000000000000000E+00, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[uA/mm2]": UBASE.UBASE("Scientific", "microampere-per-square-millimeter", 1.000000000000000E+00, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[microampere-per-square-micrometer]": UBASE.UBASE("Scientific", "microampere-per-square-micrometer", 1.000000000000000E+06, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[uA/um2]": UBASE.UBASE("Scientific", "microampere-per-square-micrometer", 1.000000000000000E+06, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[microampere-per-square-nanometer]": UBASE.UBASE("Scientific", "microampere-per-square-nanometer", 1.000000000000000E+12, "A/m2", "I/L2", "1.0")})
        unit.update({"Scientific[uA/nm2]": UBASE.UBASE("Scientific", "microampere-per-square-nanometer", 1.000000000000000E+12, "A/m2", "I/L2", "1.0")})
        self._map.update({"currentDensity": BaseSystem.BaseSystem("currentDensity", unit, "1.0")})

        unit.clear()


        unit.update({"SI[coulomb-per-square-kilometer]": UBASE.UBASE("SI", "coulomb-per-square-kilometer", 1.000000000000000E-06, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"SI[C/km2]": UBASE.UBASE("SI", "coulomb-per-square-kilometer", 1.000000000000000E-06, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"SI[coulomb-per-square-meter]": UBASE.UBASE("SI", "coulomb-per-square-meter", 1.000000000000000E+00, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"SI[C/m2]": UBASE.UBASE("SI", "coulomb-per-square-meter", 1.000000000000000E+00, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"SI[coulomb-per-square-centimeter]": UBASE.UBASE("SI", "coulomb-per-square-centimeter", 1.000000000000000E+04, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"SI[C/cm2]": UBASE.UBASE("SI", "coulomb-per-square-centimeter", 1.000000000000000E+04, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"SI[coulomb-per-square-millimeter]": UBASE.UBASE("SI", "coulomb-per-square-millimeter", 1.000000000000000E+06, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"SI[C/mm2]": UBASE.UBASE("SI", "coulomb-per-square-millimeter", 1.000000000000000E+06, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"SI[coulomb-per-square-micrometer]": UBASE.UBASE("SI", "coulomb-per-square-micrometer", 1.000000000000000E+12, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"SI[C/um2]": UBASE.UBASE("SI", "coulomb-per-square-micrometer", 1.000000000000000E+12, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"SI[coulomb-per-square-nanometer]": UBASE.UBASE("SI", "coulomb-per-square-nanometer", 1.000000000000000E+18, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"SI[C/nm2]": UBASE.UBASE("SI", "coulomb-per-square-nanometer", 1.000000000000000E+18, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"Scientific[coulomb-per-square-mile]": UBASE.UBASE("Scientific", "coulomb-per-square-mile", 3.861021585424460E-07, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"Scientific[C/mi2]": UBASE.UBASE("Scientific", "coulomb-per-square-mile", 3.861021585424460E-07, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"Scientific[coulomb-per-square-yard]": UBASE.UBASE("Scientific", "coulomb-per-square-yard", 1.195990046301080E+00, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"Scientific[C/yd2]": UBASE.UBASE("Scientific", "coulomb-per-square-yard", 1.195990046301080E+00, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"Scientific[coulomb-per-square-foot]": UBASE.UBASE("Scientific", "coulomb-per-square-foot", 1.076391041670970E+01, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"Scientific[C/ft2]": UBASE.UBASE("Scientific", "coulomb-per-square-foot", 1.076391041670970E+01, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"Scientific[coulomb-per-square-inch]": UBASE.UBASE("Scientific", "coulomb-per-square-inch", 1.550003100006200E+03, "s.A/m2", "T.I/L2", "1.0")})
        unit.update({"Scientific[C/in2]": UBASE.UBASE("Scientific", "coulomb-per-square-inch", 1.550003100006200E+03, "s.A/m2", "T.I/L2", "1.0")})
        self._map.update({"surfaceChargeDensity": BaseSystem.BaseSystem("surfaceChargeDensity", unit, "1.0")})

        unit.clear()


        unit.update({"a.u.[au-of-electric-charge-density]": UBASE.UBASE("a.u.", "au-of-electric-charge-density", 1.081202384566490E+12, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"a.u.[auecd]": UBASE.UBASE("a.u.", "au-of-electric-charge-density", 1.081202384566490E+12, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"SI[coulomb-per-cubic-kilometer]": UBASE.UBASE("SI", "coulomb-per-cubic-kilometer", 1.000000000000000E-09, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"SI[C/km3]": UBASE.UBASE("SI", "coulomb-per-cubic-kilometer", 1.000000000000000E-09, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"SI[coulomb-per-cubic-meter]": UBASE.UBASE("SI", "coulomb-per-cubic-meter", 1.000000000000000E+00, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"SI[C/m3]": UBASE.UBASE("SI", "coulomb-per-cubic-meter", 1.000000000000000E+00, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"SI[coulomb-per-cubic-centimeter]": UBASE.UBASE("SI", "coulomb-per-cubic-centimeter", 1.000000000000000E+06, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"SI[C/cm3]": UBASE.UBASE("SI", "coulomb-per-cubic-centimeter", 1.000000000000000E+06, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"SI[coulomb-per-cubic-millimeter]": UBASE.UBASE("SI", "coulomb-per-cubic-millimeter", 1.000000000000000E+09, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"SI[C/mm3]": UBASE.UBASE("SI", "coulomb-per-cubic-millimeter", 1.000000000000000E+09, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"SI[coulomb-per-cubic-micrometer]": UBASE.UBASE("SI", "coulomb-per-cubic-micrometer", 1.000000000000000E+18, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"SI[C/um3]": UBASE.UBASE("SI", "coulomb-per-cubic-micrometer", 1.000000000000000E+18, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"SI[coulomb-per-cubic-nanometer]": UBASE.UBASE("SI", "coulomb-per-cubic-nanometer", 1.000000000000000E+27, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"SI[C/nm3]": UBASE.UBASE("SI", "coulomb-per-cubic-nanometer", 1.000000000000000E+27, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"Scientific[coulomb-per-cubic-mile]": UBASE.UBASE("Scientific", "coulomb-per-cubic-mile", 2.399127585789280E-10, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"Scientific[C/mi3]": UBASE.UBASE("Scientific", "coulomb-per-cubic-mile", 2.399127585789280E-10, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"Scientific[coulomb-per-cubic-yard]": UBASE.UBASE("Scientific", "coulomb-per-cubic-yard", 1.307950619314390E+00, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"Scientific[C/yd3]": UBASE.UBASE("Scientific", "coulomb-per-cubic-yard", 1.307950619314390E+00, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"Scientific[coulomb-per-cubic-foot]": UBASE.UBASE("Scientific", "coulomb-per-cubic-foot", 3.531466672148860E+01, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"Scientific[C/ft3]": UBASE.UBASE("Scientific", "coulomb-per-cubic-foot", 3.531466672148860E+01, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"Scientific[coulomb-per-cubic-inch]": UBASE.UBASE("Scientific", "coulomb-per-cubic-inch", 6.102374409473230E+04, "s.A/m3", "T.I/L3", "1.0")})
        unit.update({"Scientific[C/in3]": UBASE.UBASE("Scientific", "coulomb-per-cubic-inch", 6.102374409473230E+04, "s.A/m3", "T.I/L3", "1.0")})
        self._map.update({"chargeDensity": BaseSystem.BaseSystem("chargeDensity", unit, "1.0")})

        unit.clear()


        unit.update({"MKS[yrneh]": UBASE.UBASE("MKS", "yrneh", 1.000000000000000E+00, "s2.A2/kg.m2", "T2.I2/M.L2", "1.0")})
        unit.update({"SI[sturgeon]": UBASE.UBASE("SI", "sturgeon", 1.000000000000000E+00, "s2.A2/kg.m2", "T2.I2/M.L2", "1.0")})
        unit.update({"Scientific[farad-per-square-second]": UBASE.UBASE("Scientific", "farad-per-square-second", 1.000000000000000E+00, "s2.A2/kg.m2", "T2.I2/M.L2", "1.0")})
        unit.update({"Scientific[F/s2]": UBASE.UBASE("Scientific", "farad-per-square-second", 1.000000000000000E+00, "s2.A2/kg.m2", "T2.I2/M.L2", "1.0")})
        unit.update({"Scientific[farad-per-square-minute]": UBASE.UBASE("Scientific", "farad-per-square-minute", 2.777777777777780E-04, "s2.A2/kg.m2", "T2.I2/M.L2", "1.0")})
        unit.update({"Scientific[F/min2]": UBASE.UBASE("Scientific", "farad-per-square-minute", 2.777777777777780E-04, "s2.A2/kg.m2", "T2.I2/M.L2", "1.0")})
        unit.update({"Scientific[farad-per-square-hour]": UBASE.UBASE("Scientific", "farad-per-square-hour", 7.716049382716050E-08, "s2.A2/kg.m2", "T2.I2/M.L2", "1.0")})
        unit.update({"Scientific[F/hr2]": UBASE.UBASE("Scientific", "farad-per-square-hour", 7.716049382716050E-08, "s2.A2/kg.m2", "T2.I2/M.L2", "1.0")})
        unit.update({"Scientific[farad-per-square-day]": UBASE.UBASE("Scientific", "farad-per-square-day", 1.339591906721540E-10, "s2.A2/kg.m2", "T2.I2/M.L2", "1.0")})
        unit.update({"Scientific[F/day2]": UBASE.UBASE("Scientific", "farad-per-square-day", 1.339591906721540E-10, "s2.A2/kg.m2", "T2.I2/M.L2", "1.0")})
        unit.update({"Scientific[farad-per-square-month]": UBASE.UBASE("Scientific", "farad-per-square-month", 1.488435451912820E-13, "s2.A2/kg.m2", "T2.I2/M.L2", "1.0")})
        unit.update({"Scientific[F/mon2]": UBASE.UBASE("Scientific", "farad-per-square-month", 1.488435451912820E-13, "s2.A2/kg.m2", "T2.I2/M.L2", "1.0")})
        unit.update({"Scientific[farad-per-square-year]": UBASE.UBASE("Scientific", "farad-per-square-year", 1.005510907653620E-15, "s2.A2/kg.m2", "T2.I2/M.L2", "1.0")})
        unit.update({"Scientific[F/yr2]": UBASE.UBASE("Scientific", "farad-per-square-year", 1.005510907653620E-15, "s2.A2/kg.m2", "T2.I2/M.L2", "1.0")})
        self._map.update({"magneticReluctance": BaseSystem.BaseSystem("magneticReluctance", unit, "1.0")})

        unit.clear()


        unit.update({"US[daraf]": UBASE.UBASE("US", "daraf", 1.000000000000000E+00, "kg.m2/s4.A2", "M.L2/T4.I2", "1.0")})
        unit.update({"Scientific[henry-per-square-second]": UBASE.UBASE("Scientific", "henry-per-square-second", 1.000000000000000E+00, "kg.m2/s4.A2", "M.L2/T4.I2", "1.0")})
        unit.update({"Scientific[H/sec2]": UBASE.UBASE("Scientific", "henry-per-square-second", 1.000000000000000E+00, "kg.m2/s4.A2", "M.L2/T4.I2", "1.0")})
        unit.update({"Scientific[henry-per-square-minute]": UBASE.UBASE("Scientific", "henry-per-square-minute", 2.777777777777780E-04, "kg.m2/s4.A2", "M.L2/T4.I2", "1.0")})
        unit.update({"Scientific[H/min2]": UBASE.UBASE("Scientific", "henry-per-square-minute", 2.777777777777780E-04, "kg.m2/s4.A2", "M.L2/T4.I2", "1.0")})
        unit.update({"Scientific[henry-per-square-hour]": UBASE.UBASE("Scientific", "henry-per-square-hour", 7.716049382716050E-08, "kg.m2/s4.A2", "M.L2/T4.I2", "1.0")})
        unit.update({"Scientific[H/hr2]": UBASE.UBASE("Scientific", "henry-per-square-hour", 7.716049382716050E-08, "kg.m2/s4.A2", "M.L2/T4.I2", "1.0")})
        unit.update({"Scientific[henry-per-square-day]": UBASE.UBASE("Scientific", "henry-per-square-day", 1.339591906721540E-10, "kg.m2/s4.A2", "M.L2/T4.I2", "1.0")})
        unit.update({"Scientific[H/day2]": UBASE.UBASE("Scientific", "henry-per-square-day", 1.339591906721540E-10, "kg.m2/s4.A2", "M.L2/T4.I2", "1.0")})
        unit.update({"Scientific[henry-per-square-month]": UBASE.UBASE("Scientific", "henry-per-square-month", 1.488435451912820E-13, "kg.m2/s4.A2", "M.L2/T4.I2", "1.0")})
        unit.update({"Scientific[H/mon2]": UBASE.UBASE("Scientific", "henry-per-square-month", 1.488435451912820E-13, "kg.m2/s4.A2", "M.L2/T4.I2", "1.0")})
        unit.update({"Scientific[henry-per-square-year]": UBASE.UBASE("Scientific", "henry-per-square-year", 1.005510907653620E-15, "kg.m2/s4.A2", "M.L2/T4.I2", "1.0")})
        unit.update({"Scientific[H/yr2]": UBASE.UBASE("Scientific", "henry-per-square-year", 1.005510907653620E-15, "kg.m2/s4.A2", "M.L2/T4.I2", "1.0")})
        self._map.update({"electricElastance": BaseSystem.BaseSystem("electricElastance", unit, "1.0")})

        unit.clear()


        unit.update({"Imperial[ringing-equivalent-number]": UBASE.UBASE("Imperial", "ringing-equivalent-number", 2.500000000000000E-04, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"Imperial[REN]": UBASE.UBASE("Imperial", "ringing-equivalent-number", 2.500000000000000E-04, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"cgs[abmho]": UBASE.UBASE("cgs", "abmho", 1.000000000000000E+09, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"cgs[aS]": UBASE.UBASE("cgs", "abmho", 1.000000000000000E+09, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"cgs[1/aW]": UBASE.UBASE("cgs", "abmho", 1.000000000000000E+09, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"cgs[emu-of-conductance]": UBASE.UBASE("cgs", "emu-of-conductance", 1.000000000000000E+09, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"cgs[emu-S]": UBASE.UBASE("cgs", "emu-of-conductance", 1.000000000000000E+09, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"cgs[esu-of-conductance]": UBASE.UBASE("cgs", "esu-of-conductance", 1.112650056053620E-12, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"cgs[esu-S]": UBASE.UBASE("cgs", "esu-of-conductance", 1.112650056053620E-12, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"cgs[statmho]": UBASE.UBASE("cgs", "statmho", 1.112650056053620E-12, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"INT[mho]": UBASE.UBASE("INT", "mho", 1.000000000000000E+00, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"Scientific[gemmbo]": UBASE.UBASE("Scientific", "gemmbo", 1.000000000000000E-06, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[siemens]": UBASE.UBASE("SI", "siemens", 1.000000000000000E+00, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[S]": UBASE.UBASE("SI", "siemens", 1.000000000000000E+00, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[yottasiemens]": UBASE.UBASE("SI", "yottasiemens", 1.000000000000000E+24, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[YS]": UBASE.UBASE("SI", "yottasiemens", 1.000000000000000E+24, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[zettasiemens]": UBASE.UBASE("SI", "zettasiemens", 1.000000000000000E+21, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[ZS]": UBASE.UBASE("SI", "zettasiemens", 1.000000000000000E+21, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[exacsiemens]": UBASE.UBASE("SI", "exacsiemens", 1.000000000000000E+18, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[ES]": UBASE.UBASE("SI", "exacsiemens", 1.000000000000000E+18, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[petasiemens]": UBASE.UBASE("SI", "petasiemens", 1.000000000000000E+15, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[PS]": UBASE.UBASE("SI", "petasiemens", 1.000000000000000E+15, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[terasiemens]": UBASE.UBASE("SI", "terasiemens", 1.000000000000000E+12, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[TS]": UBASE.UBASE("SI", "terasiemens", 1.000000000000000E+12, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[gigasiemens]": UBASE.UBASE("SI", "gigasiemens", 1.000000000000000E+09, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[GS]": UBASE.UBASE("SI", "gigasiemens", 1.000000000000000E+09, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[megasiemens]": UBASE.UBASE("SI", "megasiemens", 1.000000000000000E+06, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[MS]": UBASE.UBASE("SI", "megasiemens", 1.000000000000000E+06, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[kilosiemens]": UBASE.UBASE("SI", "kilosiemens", 1.000000000000000E+03, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[kS]": UBASE.UBASE("SI", "kilosiemens", 1.000000000000000E+03, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[hectosiemens]": UBASE.UBASE("SI", "hectosiemens", 1.000000000000000E+02, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[hS]": UBASE.UBASE("SI", "hectosiemens", 1.000000000000000E+02, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[decasiemens]": UBASE.UBASE("SI", "decasiemens", 1.000000000000000E+01, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[daS]": UBASE.UBASE("SI", "decasiemens", 1.000000000000000E+01, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[decisiemens]": UBASE.UBASE("SI", "decisiemens", 1.000000000000000E-01, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[dS]": UBASE.UBASE("SI", "decisiemens", 1.000000000000000E-01, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[centisiemens]": UBASE.UBASE("SI", "centisiemens", 1.000000000000000E-02, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[cS]": UBASE.UBASE("SI", "centisiemens", 1.000000000000000E-02, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[millisiemens]": UBASE.UBASE("SI", "millisiemens", 1.000000000000000E-03, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[mS]": UBASE.UBASE("SI", "millisiemens", 1.000000000000000E-03, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[microsiemens]": UBASE.UBASE("SI", "microsiemens", 1.000000000000000E-06, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[uS]": UBASE.UBASE("SI", "microsiemens", 1.000000000000000E-06, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[nanosiemens]": UBASE.UBASE("SI", "nanosiemens", 1.000000000000000E-09, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[nS]": UBASE.UBASE("SI", "nanosiemens", 1.000000000000000E-09, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[picosiemens]": UBASE.UBASE("SI", "picosiemens", 1.000000000000000E-12, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[pS]": UBASE.UBASE("SI", "picosiemens", 1.000000000000000E-12, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[femtosiemens]": UBASE.UBASE("SI", "femtosiemens", 1.000000000000000E-15, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[fS]": UBASE.UBASE("SI", "femtosiemens", 1.000000000000000E-15, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[attosiemens]": UBASE.UBASE("SI", "attosiemens", 1.000000000000000E-18, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[aS]": UBASE.UBASE("SI", "attosiemens", 1.000000000000000E-18, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[zeptosiemens]": UBASE.UBASE("SI", "zeptosiemens", 1.000000000000000E-21, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[zS]": UBASE.UBASE("SI", "zeptosiemens", 1.000000000000000E-21, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[yoctosiemens]": UBASE.UBASE("SI", "yoctosiemens", 1.000000000000000E-24, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        unit.update({"SI[yS]": UBASE.UBASE("SI", "yoctosiemens", 1.000000000000000E-24, "s3.A2/kg.m2", "T3.I2/M.L2", "1.0")})
        self._map.update({"electricConductance": BaseSystem.BaseSystem("electricConductance", unit, "1.0")})

        unit.clear()


        unit.update({"cgs[abfarad]": UBASE.UBASE("cgs", "abfarad", 1.000000000000000E+09, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"cgs[aF]": UBASE.UBASE("cgs", "abfarad", 1.000000000000000E+09, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"cgs[emu-of-electric-capacitance]": UBASE.UBASE("cgs", "emu-of-electric-capacitance", 1.000000000000000E+09, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"cgs[emu-F]": UBASE.UBASE("cgs", "emu-of-electric-capacitance", 1.000000000000000E+09, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"cgs[esu-of-capacitance]": UBASE.UBASE("cgs", "esu-of-capacitance", 1.112650056053620E-12, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"cgs[esu-F]": UBASE.UBASE("cgs", "esu-of-capacitance", 1.112650056053620E-12, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"cgs[statfarad]": UBASE.UBASE("cgs", "statfarad", 1.112650056053620E-12, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"cgs[statC]": UBASE.UBASE("cgs", "statfarad", 1.112650056053620E-12, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"IEUS[farad]": UBASE.UBASE("IEUS", "farad", 9.995100000000000E-01, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"IEUS[F]": UBASE.UBASE("IEUS", "farad", 9.995100000000000E-01, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"Imperial[centimeter]": UBASE.UBASE("Imperial", "centimeter", 1.111880317327170E-12, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"Imperial[cm]": UBASE.UBASE("Imperial", "centimeter", 1.111880317327170E-12, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"Scientific[jar]": UBASE.UBASE("Scientific", "jar", 1.111880317327170E-09, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"Scientific[puff]": UBASE.UBASE("Scientific", "puff", 1.000000000000000E-12, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[farad]": UBASE.UBASE("SI", "farad", 1.000000000000000E+00, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[F]": UBASE.UBASE("SI", "farad", 1.000000000000000E+00, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[yottafarad]": UBASE.UBASE("SI", "yottafarad", 1.000000000000000E+24, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[YF]": UBASE.UBASE("SI", "yottafarad", 1.000000000000000E+24, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[zettafarad]": UBASE.UBASE("SI", "zettafarad", 1.000000000000000E+21, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[ZF]": UBASE.UBASE("SI", "zettafarad", 1.000000000000000E+21, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[exacfarad]": UBASE.UBASE("SI", "exacfarad", 1.000000000000000E+18, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[EF]": UBASE.UBASE("SI", "exacfarad", 1.000000000000000E+18, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[petafarad]": UBASE.UBASE("SI", "petafarad", 1.000000000000000E+15, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[PF]": UBASE.UBASE("SI", "petafarad", 1.000000000000000E+15, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[terafarad]": UBASE.UBASE("SI", "terafarad", 1.000000000000000E+12, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[TF]": UBASE.UBASE("SI", "terafarad", 1.000000000000000E+12, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[gigafarad]": UBASE.UBASE("SI", "gigafarad", 1.000000000000000E+09, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[GF]": UBASE.UBASE("SI", "gigafarad", 1.000000000000000E+09, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[megafarad]": UBASE.UBASE("SI", "megafarad", 1.000000000000000E+06, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[MF]": UBASE.UBASE("SI", "megafarad", 1.000000000000000E+06, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[kilofarad]": UBASE.UBASE("SI", "kilofarad", 1.000000000000000E+03, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[kF]": UBASE.UBASE("SI", "kilofarad", 1.000000000000000E+03, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[hectofarad]": UBASE.UBASE("SI", "hectofarad", 1.000000000000000E+02, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[hF]": UBASE.UBASE("SI", "hectofarad", 1.000000000000000E+02, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[decafarad]": UBASE.UBASE("SI", "decafarad", 1.000000000000000E+01, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[daF]": UBASE.UBASE("SI", "decafarad", 1.000000000000000E+01, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[decifarad]": UBASE.UBASE("SI", "decifarad", 1.000000000000000E-01, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[dF]": UBASE.UBASE("SI", "decifarad", 1.000000000000000E-01, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[centifarad]": UBASE.UBASE("SI", "centifarad", 1.000000000000000E-02, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[cF]": UBASE.UBASE("SI", "centifarad", 1.000000000000000E-02, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[millifarad]": UBASE.UBASE("SI", "millifarad", 1.000000000000000E-03, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[mF]": UBASE.UBASE("SI", "millifarad", 1.000000000000000E-03, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[microfarad]": UBASE.UBASE("SI", "microfarad", 1.000000000000000E-06, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[uF]": UBASE.UBASE("SI", "microfarad", 1.000000000000000E-06, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[nanofarad]": UBASE.UBASE("SI", "nanofarad", 1.000000000000000E-09, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[nF]": UBASE.UBASE("SI", "nanofarad", 1.000000000000000E-09, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[picofarad]": UBASE.UBASE("SI", "picofarad", 1.000000000000000E-12, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[pF]": UBASE.UBASE("SI", "picofarad", 1.000000000000000E-12, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[femtofarad]": UBASE.UBASE("SI", "femtofarad", 1.000000000000000E-15, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[fF]": UBASE.UBASE("SI", "femtofarad", 1.000000000000000E-15, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[attofarad]": UBASE.UBASE("SI", "attofarad", 1.000000000000000E-18, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[aF]": UBASE.UBASE("SI", "attofarad", 1.000000000000000E-18, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[zeptofarad]": UBASE.UBASE("SI", "zeptofarad", 1.000000000000000E-21, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[zF]": UBASE.UBASE("SI", "zeptofarad", 1.000000000000000E-21, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[yoctofarad]": UBASE.UBASE("SI", "yoctofarad", 1.000000000000000E-24, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        unit.update({"SI[yF]": UBASE.UBASE("SI", "yoctofarad", 1.000000000000000E-24, "s4.A2/kg.m2", "T4.I2/M.L2", "1.0")})
        self._map.update({"capacitance": BaseSystem.BaseSystem("capacitance", unit, "1.0")})

        unit.clear()


        unit.update({"cgs[roc]": UBASE.UBASE("cgs", "roc", 1.000000000000000E+02, "s3.A2/kg.m3", "T3.I2/M.L3", "1.0")})
        unit.update({"MKSA[rom]": UBASE.UBASE("MKSA", "rom", 1.000000000000000E+00, "s3.A2/kg.m3", "T3.I2/M.L3", "1.0")})
        unit.update({"Scientific[reciprocal-ohm-per-inch]": UBASE.UBASE("Scientific", "reciprocal-ohm-per-inch", 3.937007874015750E+01, "s3.A2/kg.m3", "T3.I2/M.L3", "1.0")})
        unit.update({"Scientific[roi]": UBASE.UBASE("Scientific", "reciprocal-ohm-per-inch", 3.937007874015750E+01, "s3.A2/kg.m3", "T3.I2/M.L3", "1.0")})
        unit.update({"Scientific[reciprocal-ohm-per-foot]": UBASE.UBASE("Scientific", "reciprocal-ohm-per-foot", 3.280839895013120E+00, "s3.A2/kg.m3", "T3.I2/M.L3", "1.0")})
        unit.update({"Scientific[rof]": UBASE.UBASE("Scientific", "reciprocal-ohm-per-foot", 3.280839895013120E+00, "s3.A2/kg.m3", "T3.I2/M.L3", "1.0")})
        unit.update({"Scientific[reciprocal-ohm-per-centimeter]": UBASE.UBASE("Scientific", "reciprocal-ohm-per-centimeter", 1.000000000000000E+02, "s3.A2/kg.m3", "T3.I2/M.L3", "1.0")})
        unit.update({"Scientific[roc]": UBASE.UBASE("Scientific", "reciprocal-ohm-per-centimeter", 1.000000000000000E+02, "s3.A2/kg.m3", "T3.I2/M.L3", "1.0")})
        unit.update({"Scientific[reciprocal-ohm-per-meter]": UBASE.UBASE("Scientific", "reciprocal-ohm-per-meter", 1.000000000000000E+00, "s3.A2/kg.m3", "T3.I2/M.L3", "1.0")})
        unit.update({"Scientific[siemens-per-meter]": UBASE.UBASE("Scientific", "siemens-per-meter", 1.000000000000000E+00, "s3.A2/kg.m3", "T3.I2/M.L3", "1.0")})
        unit.update({"Scientific[S/m]": UBASE.UBASE("Scientific", "siemens-per-meter", 1.000000000000000E+00, "s3.A2/kg.m3", "T3.I2/M.L3", "1.0")})
        self._map.update({"conductivity": BaseSystem.BaseSystem("conductivity", unit, "1.0")})

        unit.clear()


        unit.update({"cgs[rayl]": UBASE.UBASE("cgs", "rayl", 1.000000000000000E+01, "kg/m2.s", "M/L2.T", "1.0")})
        unit.update({"MKSA[rayl]": UBASE.UBASE("MKSA", "rayl", 1.000000000000000E+00, "kg/m2.s", "M/L2.T", "1.0")})
        self._map.update({"specificAcousticImpedance": BaseSystem.BaseSystem("specificAcousticImpedance", unit, "1.0")})

        unit.clear()


        unit.update({"cgs[maxwell]": UBASE.UBASE("cgs", "maxwell", 1.000000000000000E-08, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"cgs[Mx]": UBASE.UBASE("cgs", "maxwell", 1.000000000000000E-08, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"Imperial[kapp-line]": UBASE.UBASE("Imperial", "kapp-line", 6.000000000000000E-05, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"Imperial[unit-pole]": UBASE.UBASE("Imperial", "unit-pole", 1.256637061435920E-07, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"Scientific[debye]": UBASE.UBASE("Scientific", "debye", 3.335640951981520E-30, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"Scientific[D]": UBASE.UBASE("Scientific", "debye", 3.335640951981520E-30, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[weber]": UBASE.UBASE("SI", "weber", 1.000000000000000E+00, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[Wb]": UBASE.UBASE("SI", "weber", 1.000000000000000E+00, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"US[line]": UBASE.UBASE("US", "line", 1.000000000000000E-08, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[yottaweber]": UBASE.UBASE("SI", "yottaweber", 1.000000000000000E+24, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[YWb]": UBASE.UBASE("SI", "yottaweber", 1.000000000000000E+24, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[zettaweber]": UBASE.UBASE("SI", "zettaweber", 1.000000000000000E+21, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[ZWb]": UBASE.UBASE("SI", "zettaweber", 1.000000000000000E+21, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[exacweber]": UBASE.UBASE("SI", "exacweber", 1.000000000000000E+18, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[EWb]": UBASE.UBASE("SI", "exacweber", 1.000000000000000E+18, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[petaweber]": UBASE.UBASE("SI", "petaweber", 1.000000000000000E+15, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[PWb]": UBASE.UBASE("SI", "petaweber", 1.000000000000000E+15, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[teraweber]": UBASE.UBASE("SI", "teraweber", 1.000000000000000E+12, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[TWb]": UBASE.UBASE("SI", "teraweber", 1.000000000000000E+12, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[gigaweber]": UBASE.UBASE("SI", "gigaweber", 1.000000000000000E+09, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[GWb]": UBASE.UBASE("SI", "gigaweber", 1.000000000000000E+09, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[megaweber]": UBASE.UBASE("SI", "megaweber", 1.000000000000000E+06, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[MWb]": UBASE.UBASE("SI", "megaweber", 1.000000000000000E+06, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[kiloweber]": UBASE.UBASE("SI", "kiloweber", 1.000000000000000E+03, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[kWb]": UBASE.UBASE("SI", "kiloweber", 1.000000000000000E+03, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[hectoweber]": UBASE.UBASE("SI", "hectoweber", 1.000000000000000E+02, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[hWb]": UBASE.UBASE("SI", "hectoweber", 1.000000000000000E+02, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[decaweber]": UBASE.UBASE("SI", "decaweber", 1.000000000000000E+01, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[daWb]": UBASE.UBASE("SI", "decaweber", 1.000000000000000E+01, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[deciweber]": UBASE.UBASE("SI", "deciweber", 1.000000000000000E-01, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[dWb]": UBASE.UBASE("SI", "deciweber", 1.000000000000000E-01, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[centiweber]": UBASE.UBASE("SI", "centiweber", 1.000000000000000E-02, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[cWb]": UBASE.UBASE("SI", "centiweber", 1.000000000000000E-02, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[milliweber]": UBASE.UBASE("SI", "milliweber", 1.000000000000000E-03, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[mWb]": UBASE.UBASE("SI", "milliweber", 1.000000000000000E-03, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[microweber]": UBASE.UBASE("SI", "microweber", 1.000000000000000E-06, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[uWb]": UBASE.UBASE("SI", "microweber", 1.000000000000000E-06, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[nanoweber]": UBASE.UBASE("SI", "nanoweber", 1.000000000000000E-09, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[nWb]": UBASE.UBASE("SI", "nanoweber", 1.000000000000000E-09, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[picoweber]": UBASE.UBASE("SI", "picoweber", 1.000000000000000E-12, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[pWb]": UBASE.UBASE("SI", "picoweber", 1.000000000000000E-12, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[femtoweber]": UBASE.UBASE("SI", "femtoweber", 1.000000000000000E-15, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[fWb]": UBASE.UBASE("SI", "femtoweber", 1.000000000000000E-15, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[attoweber]": UBASE.UBASE("SI", "attoweber", 1.000000000000000E-18, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[aWb]": UBASE.UBASE("SI", "attoweber", 1.000000000000000E-18, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[zeptoweber]": UBASE.UBASE("SI", "zeptoweber", 1.000000000000000E-21, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[zWb]": UBASE.UBASE("SI", "zeptoweber", 1.000000000000000E-21, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[yoctoweber]": UBASE.UBASE("SI", "yoctoweber", 1.000000000000000E-24, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        unit.update({"SI[yWb]": UBASE.UBASE("SI", "yoctoweber", 1.000000000000000E-24, "kg.m2/s2.A", "M.L2/T2.I", "1.0")})
        self._map.update({"magneticInduction": BaseSystem.BaseSystem("magneticInduction", unit, "1.0")})

        unit.clear()


        unit.update({"cgs[abhenry]": UBASE.UBASE("cgs", "abhenry", 1.000000000000000E-09, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"cgs[aH]": UBASE.UBASE("cgs", "abhenry", 1.000000000000000E-09, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"cgs[emu-of-inductance]": UBASE.UBASE("cgs", "emu-of-inductance", 1.000000000000000E-09, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"cgs[emu-H]": UBASE.UBASE("cgs", "emu-of-inductance", 1.000000000000000E-09, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"cgs[esu-of-inductance]": UBASE.UBASE("cgs", "esu-of-inductance", 8.987551787368180E+11, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"cgs[esu-H]": UBASE.UBASE("cgs", "esu-of-inductance", 8.987551787368180E+11, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"cgs[stathenry]": UBASE.UBASE("cgs", "stathenry", 8.987551787368180E+11, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"cgs[statH]": UBASE.UBASE("cgs", "stathenry", 8.987551787368180E+11, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"IEUS[henry]": UBASE.UBASE("IEUS", "henry", 1.000495000000000E+00, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"IEUS[H]": UBASE.UBASE("IEUS", "henry", 1.000495000000000E+00, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"Scientific[centimeter]": UBASE.UBASE("Scientific", "centimeter", 1.000000000000000E-09, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"Scientific[cm]": UBASE.UBASE("Scientific", "centimeter", 1.000000000000000E-09, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[henry]": UBASE.UBASE("SI", "henry", 1.000000000000000E+00, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[H]": UBASE.UBASE("SI", "henry", 1.000000000000000E+00, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"UK[mic]": UBASE.UBASE("UK", "mic", 1.000000000000000E+00, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"US[henry]": UBASE.UBASE("US", "henry", 1.000495000000000E+00, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"US[H]": UBASE.UBASE("US", "henry", 1.000495000000000E+00, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"US[henry(mean)]": UBASE.UBASE("US", "henry(mean)", 1.000490000000000E+00, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"US[H(mean)]": UBASE.UBASE("US", "henry(mean)", 1.000490000000000E+00, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[yottahenry]": UBASE.UBASE("SI", "yottahenry", 1.000000000000000E+24, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[YH]": UBASE.UBASE("SI", "yottahenry", 1.000000000000000E+24, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[zettahenry]": UBASE.UBASE("SI", "zettahenry", 1.000000000000000E+21, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[ZH]": UBASE.UBASE("SI", "zettahenry", 1.000000000000000E+21, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[exachenry]": UBASE.UBASE("SI", "exachenry", 1.000000000000000E+18, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[EH]": UBASE.UBASE("SI", "exachenry", 1.000000000000000E+18, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[petahenry]": UBASE.UBASE("SI", "petahenry", 1.000000000000000E+15, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[PH]": UBASE.UBASE("SI", "petahenry", 1.000000000000000E+15, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[terahenry]": UBASE.UBASE("SI", "terahenry", 1.000000000000000E+12, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[TH]": UBASE.UBASE("SI", "terahenry", 1.000000000000000E+12, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[gigahenry]": UBASE.UBASE("SI", "gigahenry", 1.000000000000000E+09, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[GH]": UBASE.UBASE("SI", "gigahenry", 1.000000000000000E+09, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[megahenry]": UBASE.UBASE("SI", "megahenry", 1.000000000000000E+06, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[MH]": UBASE.UBASE("SI", "megahenry", 1.000000000000000E+06, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[kilochenry]": UBASE.UBASE("SI", "kilochenry", 1.000000000000000E+03, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[kH]": UBASE.UBASE("SI", "kilochenry", 1.000000000000000E+03, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[hectohenry]": UBASE.UBASE("SI", "hectohenry", 1.000000000000000E+02, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[hH]": UBASE.UBASE("SI", "hectohenry", 1.000000000000000E+02, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[decachenry]": UBASE.UBASE("SI", "decachenry", 1.000000000000000E+01, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[daH]": UBASE.UBASE("SI", "decachenry", 1.000000000000000E+01, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[decihenry]": UBASE.UBASE("SI", "decihenry", 1.000000000000000E-01, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[dH]": UBASE.UBASE("SI", "decihenry", 1.000000000000000E-01, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[centihenry]": UBASE.UBASE("SI", "centihenry", 1.000000000000000E-02, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[cH]": UBASE.UBASE("SI", "centihenry", 1.000000000000000E-02, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[millihenry]": UBASE.UBASE("SI", "millihenry", 1.000000000000000E-03, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[mH]": UBASE.UBASE("SI", "millihenry", 1.000000000000000E-03, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[microhenry]": UBASE.UBASE("SI", "microhenry", 1.000000000000000E-06, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[uH]": UBASE.UBASE("SI", "microhenry", 1.000000000000000E-06, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[nanohenry]": UBASE.UBASE("SI", "nanohenry", 1.000000000000000E-09, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[nH]": UBASE.UBASE("SI", "nanohenry", 1.000000000000000E-09, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[picohenry]": UBASE.UBASE("SI", "picohenry", 1.000000000000000E-12, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[pH]": UBASE.UBASE("SI", "picohenry", 1.000000000000000E-12, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[femtohenry]": UBASE.UBASE("SI", "femtohenry", 1.000000000000000E-15, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[fH]": UBASE.UBASE("SI", "femtohenry", 1.000000000000000E-15, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[attohenry]": UBASE.UBASE("SI", "attohenry", 1.000000000000000E-18, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[aH]": UBASE.UBASE("SI", "attohenry", 1.000000000000000E-18, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[zeptohenry]": UBASE.UBASE("SI", "zeptohenry", 1.000000000000000E-21, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[zH]": UBASE.UBASE("SI", "zeptohenry", 1.000000000000000E-21, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[yoctohenry]": UBASE.UBASE("SI", "yoctohenry", 1.000000000000000E-24, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        unit.update({"SI[yH]": UBASE.UBASE("SI", "yoctohenry", 1.000000000000000E-24, "kg.m2/s2.A2", "M.L2/T2.I2", "1.0")})
        self._map.update({"inductance": BaseSystem.BaseSystem("inductance", unit, "1.0")})

        unit.clear()


        unit.update({"cgs[abvolt]": UBASE.UBASE("cgs", "abvolt", 1.000000000000000E-08, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"cgs[aV]": UBASE.UBASE("cgs", "abvolt", 1.000000000000000E-08, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"cgs[emu-of-electric-potential]": UBASE.UBASE("cgs", "emu-of-electric-potential", 1.000000000000000E-08, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"cgs[emu-V]": UBASE.UBASE("cgs", "emu-of-electric-potential", 1.000000000000000E-08, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"cgs[esu-of-electric-potential]": UBASE.UBASE("cgs", "esu-of-electric-potential", 2.997924580000000E+02, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"cgs[esu-V]": UBASE.UBASE("cgs", "esu-of-electric-potential", 2.997924580000000E+02, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"cgs[statvolt]": UBASE.UBASE("cgs", "statvolt", 2.997924580000000E+02, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"cgs[statV]": UBASE.UBASE("cgs", "statvolt", 2.997924580000000E+02, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"IEUS[volt]": UBASE.UBASE("IEUS", "volt", 1.000330000000000E+00, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"IEUS[V]": UBASE.UBASE("IEUS", "volt", 1.000330000000000E+00, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"IEUS[volt(mean)]": UBASE.UBASE("IEUS", "volt(mean)", 1.000340000000000E+00, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"IEUS[V(mean)]": UBASE.UBASE("IEUS", "volt(mean)", 1.000340000000000E+00, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"INT[daniell]": UBASE.UBASE("INT", "daniell", 1.042000000000000E+00, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"INT[volt(mean)]": UBASE.UBASE("INT", "volt(mean)", 1.000340000000000E+00, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"INT[V(mean)]": UBASE.UBASE("INT", "volt(mean)", 1.000340000000000E+00, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[volt]": UBASE.UBASE("SI", "volt", 1.000000000000000E+00, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[V]": UBASE.UBASE("SI", "volt", 1.000000000000000E+00, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"UK[crocodile]": UBASE.UBASE("UK", "crocodile", 1.000000000000000E+06, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"US[volt]": UBASE.UBASE("US", "volt", 1.000330000000000E+00, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"US[V]": UBASE.UBASE("US", "volt", 1.000330000000000E+00, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[yottavolt]": UBASE.UBASE("SI", "yottavolt", 1.000000000000000E+24, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[YV]": UBASE.UBASE("SI", "yottavolt", 1.000000000000000E+24, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[zettavolt]": UBASE.UBASE("SI", "zettavolt", 1.000000000000000E+21, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[ZV]": UBASE.UBASE("SI", "zettavolt", 1.000000000000000E+21, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[exacvolt]": UBASE.UBASE("SI", "exacvolt", 1.000000000000000E+18, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[EV]": UBASE.UBASE("SI", "exacvolt", 1.000000000000000E+18, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[petavolt]": UBASE.UBASE("SI", "petavolt", 1.000000000000000E+15, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[PV]": UBASE.UBASE("SI", "petavolt", 1.000000000000000E+15, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[teravolt]": UBASE.UBASE("SI", "teravolt", 1.000000000000000E+12, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[TV]": UBASE.UBASE("SI", "teravolt", 1.000000000000000E+12, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[gigavolt]": UBASE.UBASE("SI", "gigavolt", 1.000000000000000E+09, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[GV]": UBASE.UBASE("SI", "gigavolt", 1.000000000000000E+09, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[megavolt]": UBASE.UBASE("SI", "megavolt", 1.000000000000000E+06, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[MV]": UBASE.UBASE("SI", "megavolt", 1.000000000000000E+06, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[kilocvolt]": UBASE.UBASE("SI", "kilocvolt", 1.000000000000000E+03, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[kV]": UBASE.UBASE("SI", "kilocvolt", 1.000000000000000E+03, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[hectovolt]": UBASE.UBASE("SI", "hectovolt", 1.000000000000000E+02, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[hV]": UBASE.UBASE("SI", "hectovolt", 1.000000000000000E+02, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[decavolt]": UBASE.UBASE("SI", "decavolt", 1.000000000000000E+01, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[daV]": UBASE.UBASE("SI", "decavolt", 1.000000000000000E+01, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[decivolt]": UBASE.UBASE("SI", "decivolt", 1.000000000000000E-01, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[dV]": UBASE.UBASE("SI", "decivolt", 1.000000000000000E-01, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[centivolt]": UBASE.UBASE("SI", "centivolt", 1.000000000000000E-02, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[cV]": UBASE.UBASE("SI", "centivolt", 1.000000000000000E-02, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[millivolt]": UBASE.UBASE("SI", "millivolt", 1.000000000000000E-03, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[mV]": UBASE.UBASE("SI", "millivolt", 1.000000000000000E-03, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[microvolt]": UBASE.UBASE("SI", "microvolt", 1.000000000000000E-06, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[uV]": UBASE.UBASE("SI", "microvolt", 1.000000000000000E-06, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[nanovolt]": UBASE.UBASE("SI", "nanovolt", 1.000000000000000E-09, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[nV]": UBASE.UBASE("SI", "nanovolt", 1.000000000000000E-09, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[picovolt]": UBASE.UBASE("SI", "picovolt", 1.000000000000000E-12, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[pV]": UBASE.UBASE("SI", "picovolt", 1.000000000000000E-12, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[femtovolt]": UBASE.UBASE("SI", "femtovolt", 1.000000000000000E-15, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[fV]": UBASE.UBASE("SI", "femtovolt", 1.000000000000000E-15, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[attovolt]": UBASE.UBASE("SI", "attovolt", 1.000000000000000E-18, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[aV]": UBASE.UBASE("SI", "attovolt", 1.000000000000000E-18, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[zeptovolt]": UBASE.UBASE("SI", "zeptovolt", 1.000000000000000E-21, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[zV]": UBASE.UBASE("SI", "zeptovolt", 1.000000000000000E-21, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[yoctovolt]": UBASE.UBASE("SI", "yoctovolt", 1.000000000000000E-24, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        unit.update({"SI[yV]": UBASE.UBASE("SI", "yoctovolt", 1.000000000000000E-24, "kg.m2/s3.A", "M.L2/T3.I", "1.0")})
        self._map.update({"potential": BaseSystem.BaseSystem("potential", unit, "1.0")})

        unit.clear()


        unit.update({"cgs[abohm]": UBASE.UBASE("cgs", "abohm", 1.000000000000000E-09, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"cgs[aW]": UBASE.UBASE("cgs", "abohm", 1.000000000000000E-09, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"cgs[emu-of-resistance]": UBASE.UBASE("cgs", "emu-of-resistance", 1.000000000000000E-09, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"cgs[emi-W]": UBASE.UBASE("cgs", "emu-of-resistance", 1.000000000000000E-09, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"cgs[esu-of-resistance]": UBASE.UBASE("cgs", "esu-of-resistance", 8.987551787368180E+11, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"cgs[esu-W]": UBASE.UBASE("cgs", "esu-of-resistance", 8.987551787368180E+11, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"cgs[statohm]": UBASE.UBASE("cgs", "statohm", 8.987551787368180E+11, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"German[siemens]": UBASE.UBASE("German", "siemens", 9.407337723424270E-01, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"IEUS[ohm]": UBASE.UBASE("IEUS", "ohm", 1.000495000000000E+00, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"IEUS[ohm(legal)]": UBASE.UBASE("IEUS", "ohm(legal)", 9.972000000000000E-01, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"IEUS[ohm(mean)]": UBASE.UBASE("IEUS", "ohm(mean)", 1.000490000000000E+00, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"Scientific[lenz(resistance)]": UBASE.UBASE("Scientific", "lenz(resistance)", 1.252410989790000E-03, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[jacobi]": UBASE.UBASE("SI", "jacobi", 6.400000000000000E-01, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[ohm]": UBASE.UBASE("SI", "ohm", 1.000000000000000E+00, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[W]": UBASE.UBASE("SI", "ohm", 1.000000000000000E+00, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"UK[preece]": UBASE.UBASE("UK", "preece", 1.000000000000000E+06, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"UK[wheatstone]": UBASE.UBASE("UK", "wheatstone", 2.500000000000000E-03, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"US[ohm]": UBASE.UBASE("US", "ohm", 1.000495000000000E+00, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"US[ohm(legal)]": UBASE.UBASE("US", "ohm(legal)", 9.972000000000000E-01, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"US[ohm(mean)]": UBASE.UBASE("US", "ohm(mean)", 1.000490000000000E+00, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[yottaohm]": UBASE.UBASE("SI", "yottaohm", 1.000000000000000E+24, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[YW]": UBASE.UBASE("SI", "yottaohm", 1.000000000000000E+24, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[zettaohm]": UBASE.UBASE("SI", "zettaohm", 1.000000000000000E+21, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[ZW]": UBASE.UBASE("SI", "zettaohm", 1.000000000000000E+21, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[exacohm]": UBASE.UBASE("SI", "exacohm", 1.000000000000000E+18, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[EW]": UBASE.UBASE("SI", "exacohm", 1.000000000000000E+18, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[petaohm]": UBASE.UBASE("SI", "petaohm", 1.000000000000000E+15, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[PW]": UBASE.UBASE("SI", "petaohm", 1.000000000000000E+15, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[teraohm]": UBASE.UBASE("SI", "teraohm", 1.000000000000000E+12, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[TW]": UBASE.UBASE("SI", "teraohm", 1.000000000000000E+12, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[gigaohm]": UBASE.UBASE("SI", "gigaohm", 1.000000000000000E+09, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[GW]": UBASE.UBASE("SI", "gigaohm", 1.000000000000000E+09, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[megaohm]": UBASE.UBASE("SI", "megaohm", 1.000000000000000E+06, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[MW]": UBASE.UBASE("SI", "megaohm", 1.000000000000000E+06, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[kiloohm]": UBASE.UBASE("SI", "kiloohm", 1.000000000000000E+03, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[kW]": UBASE.UBASE("SI", "kiloohm", 1.000000000000000E+03, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[hectoohm]": UBASE.UBASE("SI", "hectoohm", 1.000000000000000E+02, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[hW]": UBASE.UBASE("SI", "hectoohm", 1.000000000000000E+02, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[decaohm]": UBASE.UBASE("SI", "decaohm", 1.000000000000000E+01, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[daW]": UBASE.UBASE("SI", "decaohm", 1.000000000000000E+01, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[deciohm]": UBASE.UBASE("SI", "deciohm", 1.000000000000000E-01, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[dW]": UBASE.UBASE("SI", "deciohm", 1.000000000000000E-01, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[centiohm]": UBASE.UBASE("SI", "centiohm", 1.000000000000000E-02, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[cW]": UBASE.UBASE("SI", "centiohm", 1.000000000000000E-02, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[milliohm]": UBASE.UBASE("SI", "milliohm", 1.000000000000000E-03, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[mW]": UBASE.UBASE("SI", "milliohm", 1.000000000000000E-03, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[microohm]": UBASE.UBASE("SI", "microohm", 1.000000000000000E-06, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[uW]": UBASE.UBASE("SI", "microohm", 1.000000000000000E-06, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[nanoohm]": UBASE.UBASE("SI", "nanoohm", 1.000000000000000E-09, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[nW]": UBASE.UBASE("SI", "nanoohm", 1.000000000000000E-09, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[picoohm]": UBASE.UBASE("SI", "picoohm", 1.000000000000000E-12, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[pW]": UBASE.UBASE("SI", "picoohm", 1.000000000000000E-12, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[femtoohm]": UBASE.UBASE("SI", "femtoohm", 1.000000000000000E-15, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[fW]": UBASE.UBASE("SI", "femtoohm", 1.000000000000000E-15, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[attoohm]": UBASE.UBASE("SI", "attoohm", 1.000000000000000E-18, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[aW]": UBASE.UBASE("SI", "attoohm", 1.000000000000000E-18, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[zeptoohm]": UBASE.UBASE("SI", "zeptoohm", 1.000000000000000E-21, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[zW]": UBASE.UBASE("SI", "zeptoohm", 1.000000000000000E-21, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[yoctoohm]": UBASE.UBASE("SI", "yoctoohm", 1.000000000000000E-24, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        unit.update({"SI[yW]": UBASE.UBASE("SI", "yoctoohm", 1.000000000000000E-24, "kg.m2/s3.A2", "M.L2/T3.I2", "1.0")})
        self._map.update({"resistance": BaseSystem.BaseSystem("resistance", unit, "1.0")})

        unit.clear()


        unit.update({"Imperial[ohm-circular-mil-per-foot]": UBASE.UBASE("Imperial", "ohm-circular-mil-per-foot", 1.662426112524600E-09, "kg.m3/s3.A2", "M.L3/T3.I2", "1.0")})
        unit.update({"Imperial[W-cmi/ft]": UBASE.UBASE("Imperial", "ohm-circular-mil-per-foot", 1.662426112524600E-09, "kg.m3/s3.A2", "M.L3/T3.I2", "1.0")})
        unit.update({"Imperial[ohm-cmi/ft]": UBASE.UBASE("Imperial", "ohm-circular-mil-per-foot", 1.662426112524600E-09, "kg.m3/s3.A2", "M.L3/T3.I2", "1.0")})
        unit.update({"INT[international-annealed-copper-standard]": UBASE.UBASE("INT", "international-annealed-copper-standard", 1.724137931030000E-10, "kg.m3/s3.A2", "M.L3/T3.I2", "1.0")})
        unit.update({"INT[IACS]": UBASE.UBASE("INT", "international-annealed-copper-standard", 1.724137931030000E-10, "kg.m3/s3.A2", "M.L3/T3.I2", "1.0")})
        unit.update({"UK[preece]": UBASE.UBASE("UK", "preece", 1.000000000000000E-07, "kg.m3/s3.A2", "M.L3/T3.I2", "1.0")})
        unit.update({"SI[ohm-meter]": UBASE.UBASE("SI", "ohm-meter", 1.000000000000000E+00, "kg.m3/s3.A2", "M.L3/T3.I2", "1.0")})
        unit.update({"SI[W-m]": UBASE.UBASE("SI", "ohm-meter", 1.000000000000000E+00, "kg.m3/s3.A2", "M.L3/T3.I2", "1.0")})
        unit.update({"SI[ohm-m]": UBASE.UBASE("SI", "ohm-meter", 1.000000000000000E+00, "kg.m3/s3.A2", "M.L3/T3.I2", "1.0")})
        self._map.update({"resistivity": BaseSystem.BaseSystem("resistivity", unit, "1.0")})

        unit.clear()


        unit.update({"cgs[acoustic-ohm]": UBASE.UBASE("cgs", "acoustic-ohm", 1.000000000000000E+05, "kg/m 4.s", "M/L4.T", "1.0")})
        unit.update({"cgs[ohm(acoustic)]": UBASE.UBASE("cgs", "ohm(acoustic)", 1.000000000000000E-05, "kg/m 4.s", "M/L4.T", "1.0")})
        unit.update({"cgs[ohm(mechanical)]": UBASE.UBASE("cgs", "ohm(mechanical)", 1.000000000000000E-05, "kg/m 4.s", "M/L4.T", "1.0")})
        unit.update({"SI[ohm(mechanical)]": UBASE.UBASE("SI", "ohm(mechanical)", 1.000000000000000E+00, "kg/m 4.s", "M/L4.T", "1.0")})
        unit.update({"SI[acoustic-ohm]": UBASE.UBASE("SI", "acoustic-ohm", 1.000000000000000E+00, "kg/m 4.s", "M/L4.T", "1.0")})
        unit.update({"SI[ohm(acoustic)]": UBASE.UBASE("SI", "ohm(acoustic)", 1.000000000000000E+00, "kg/m 4.s", "M/L4.T", "1.0")})
        self._map.update({"acousticImpedance": BaseSystem.BaseSystem("acousticImpedance", unit, "1.0")})

        unit.clear()


        unit.update({"a.u.[au-of-electric-field-strength]": UBASE.UBASE("a.u.", "au-of-electric-field-strength", 5.142206747621690E+11, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"a.u.[auefs]": UBASE.UBASE("a.u.", "au-of-electric-field-strength", 5.142206747621690E+11, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"a.u.[au-of-electric-potential]": UBASE.UBASE("a.u.", "au-of-electric-potential", 2.721138624593030E+01, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"a.u.[auep]": UBASE.UBASE("a.u.", "au-of-electric-potential", 2.721138624593030E+01, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[volt-per-kilometer]": UBASE.UBASE("SI", "volt-per-kilometer", 1.000000000000000E-03, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[V/km]": UBASE.UBASE("SI", "volt-per-kilometer", 1.000000000000000E-03, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[volt-per-meter]": UBASE.UBASE("SI", "volt-per-meter", 1.000000000000000E+00, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[V/m]": UBASE.UBASE("SI", "volt-per-meter", 1.000000000000000E+00, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[volt-per-centimeter]": UBASE.UBASE("SI", "volt-per-centimeter", 1.000000000000000E+02, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[V/cm]": UBASE.UBASE("SI", "volt-per-centimeter", 1.000000000000000E+02, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[volt-per-millimeter]": UBASE.UBASE("SI", "volt-per-millimeter", 1.000000000000000E+03, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[V/mm]": UBASE.UBASE("SI", "volt-per-millimeter", 1.000000000000000E+03, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[volt-per-micrometer]": UBASE.UBASE("SI", "volt-per-micrometer", 1.000000000000000E+06, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[V/um]": UBASE.UBASE("SI", "volt-per-micrometer", 1.000000000000000E+06, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[volt-per-nanometer]": UBASE.UBASE("SI", "volt-per-nanometer", 1.000000000000000E+09, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[V/nm]": UBASE.UBASE("SI", "volt-per-nanometer", 1.000000000000000E+09, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[millivolt-per-meter]": UBASE.UBASE("SI", "millivolt-per-meter", 1.000000000000000E-03, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[mV/m]": UBASE.UBASE("SI", "millivolt-per-meter", 1.000000000000000E-03, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[millivolt-per-centimeter]": UBASE.UBASE("SI", "millivolt-per-centimeter", 1.000000000000000E-01, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[mV/cm]": UBASE.UBASE("SI", "millivolt-per-centimeter", 1.000000000000000E-01, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[millivolt-per-millimeter]": UBASE.UBASE("SI", "millivolt-per-millimeter", 1.000000000000000E+00, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[mV/mm]": UBASE.UBASE("SI", "millivolt-per-millimeter", 1.000000000000000E+00, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[millivolt-per-micrometer]": UBASE.UBASE("SI", "millivolt-per-micrometer", 1.000000000000000E+03, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[mV/um]": UBASE.UBASE("SI", "millivolt-per-micrometer", 1.000000000000000E+03, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[millivolt-per-nanometer]": UBASE.UBASE("SI", "millivolt-per-nanometer", 1.000000000000000E+06, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[mV/nm]": UBASE.UBASE("SI", "millivolt-per-nanometer", 1.000000000000000E+06, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[microvolt-per-meter]": UBASE.UBASE("SI", "microvolt-per-meter", 1.000000000000000E-06, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[uV/m]": UBASE.UBASE("SI", "microvolt-per-meter", 1.000000000000000E-06, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[microvolt-per-centimeter]": UBASE.UBASE("SI", "microvolt-per-centimeter", 1.000000000000000E-04, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[uV/cm]": UBASE.UBASE("SI", "microvolt-per-centimeter", 1.000000000000000E-04, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[microvolt-per-millimeter]": UBASE.UBASE("SI", "microvolt-per-millimeter", 1.000000000000000E-03, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[uV/mm]": UBASE.UBASE("SI", "microvolt-per-millimeter", 1.000000000000000E-03, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[microvolt-per-micrometer]": UBASE.UBASE("SI", "microvolt-per-micrometer", 1.000000000000000E+00, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[uV/um]": UBASE.UBASE("SI", "microvolt-per-micrometer", 1.000000000000000E+00, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[mircovolt-per-nanometer]": UBASE.UBASE("SI", "mircovolt-per-nanometer", 1.000000000000000E+03, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"SI[uV/nm]": UBASE.UBASE("SI", "mircovolt-per-nanometer", 1.000000000000000E+03, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[volt-per-mile]": UBASE.UBASE("Scientific", "volt-per-mile", 6.213711922373340E-04, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[V/mi]": UBASE.UBASE("Scientific", "volt-per-mile", 6.213711922373340E-04, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[volt-per-yard]": UBASE.UBASE("Scientific", "volt-per-yard", 1.093613298337710E+00, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[V/yd]": UBASE.UBASE("Scientific", "volt-per-yard", 1.093613298337710E+00, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[volt-per-foot]": UBASE.UBASE("Scientific", "volt-per-foot", 3.280839895013120E+00, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[V/ft]": UBASE.UBASE("Scientific", "volt-per-foot", 3.280839895013120E+00, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[volt-per-inch]": UBASE.UBASE("Scientific", "volt-per-inch", 3.937007874015750E+01, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[V/in]": UBASE.UBASE("Scientific", "volt-per-inch", 3.937007874015750E+01, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[millivolt-per-yard]": UBASE.UBASE("Scientific", "millivolt-per-yard", 1.093613298337710E-03, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[mV/yd]": UBASE.UBASE("Scientific", "millivolt-per-yard", 1.093613298337710E-03, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[millivolt-per-foot]": UBASE.UBASE("Scientific", "millivolt-per-foot", 3.280839895013120E-03, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[mV/ft]": UBASE.UBASE("Scientific", "millivolt-per-foot", 3.280839895013120E-03, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[millivolt-per-inch]": UBASE.UBASE("Scientific", "millivolt-per-inch", 3.937007874015750E-02, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[mV/in]": UBASE.UBASE("Scientific", "millivolt-per-inch", 3.937007874015750E-02, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[microvolt-per-yard]": UBASE.UBASE("Scientific", "microvolt-per-yard", 1.093613298337710E-06, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[uV/yd]": UBASE.UBASE("Scientific", "microvolt-per-yard", 1.093613298337710E-06, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[microvolt-per-foot]": UBASE.UBASE("Scientific", "microvolt-per-foot", 3.280839895013120E-06, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[uV/ft]": UBASE.UBASE("Scientific", "microvolt-per-foot", 3.280839895013120E-06, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[microvolt-per-inch]": UBASE.UBASE("Scientific", "microvolt-per-inch", 3.937007874015750E-05, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        unit.update({"Scientific[uV/in]": UBASE.UBASE("Scientific", "microvolt-per-inch", 3.937007874015750E-05, "kg.m/s3.A", "M.L/T3.I", "1.0")})
        self._map.update({"electricFieldStrength": BaseSystem.BaseSystem("electricFieldStrength", unit, "1.0")})

        unit.clear()


        unit.update({"a.u.[au-of-magnetic-flux-density]": UBASE.UBASE("a.u.", "au-of-magnetic-flux-density", 2.350517567581310E+05, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"a.u.[aumfd]": UBASE.UBASE("a.u.", "au-of-magnetic-flux-density", 2.350517567581310E+05, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"cgs[gauss]": UBASE.UBASE("cgs", "gauss", 1.000000000000000E-04, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"cgs[Gs]": UBASE.UBASE("cgs", "gauss", 1.000000000000000E-04, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"cgs[G]": UBASE.UBASE("cgs", "gauss", 1.000000000000000E-04, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"Scientific[gamma]": UBASE.UBASE("Scientific", "gamma", 1.000000000000000E-09, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"Scientific[g]": UBASE.UBASE("Scientific", "gamma", 1.000000000000000E-09, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[tesla]": UBASE.UBASE("SI", "tesla", 1.000000000000000E+00, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[T]": UBASE.UBASE("SI", "tesla", 1.000000000000000E+00, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[yottatesla]": UBASE.UBASE("SI", "yottatesla", 1.000000000000000E+24, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[YT]": UBASE.UBASE("SI", "yottatesla", 1.000000000000000E+24, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[zettatesla]": UBASE.UBASE("SI", "zettatesla", 1.000000000000000E+21, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[ZT]": UBASE.UBASE("SI", "zettatesla", 1.000000000000000E+21, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[exactesla]": UBASE.UBASE("SI", "exactesla", 1.000000000000000E+18, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[ET]": UBASE.UBASE("SI", "exactesla", 1.000000000000000E+18, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[petatesla]": UBASE.UBASE("SI", "petatesla", 1.000000000000000E+15, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[PT]": UBASE.UBASE("SI", "petatesla", 1.000000000000000E+15, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[teratesla]": UBASE.UBASE("SI", "teratesla", 1.000000000000000E+12, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[TT]": UBASE.UBASE("SI", "teratesla", 1.000000000000000E+12, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[gigatesla]": UBASE.UBASE("SI", "gigatesla", 1.000000000000000E+09, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[GT]": UBASE.UBASE("SI", "gigatesla", 1.000000000000000E+09, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[megatesla]": UBASE.UBASE("SI", "megatesla", 1.000000000000000E+06, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[MT]": UBASE.UBASE("SI", "megatesla", 1.000000000000000E+06, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[kiloctesla]": UBASE.UBASE("SI", "kiloctesla", 1.000000000000000E+03, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[kT]": UBASE.UBASE("SI", "kiloctesla", 1.000000000000000E+03, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[hectotesla]": UBASE.UBASE("SI", "hectotesla", 1.000000000000000E+02, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[hT]": UBASE.UBASE("SI", "hectotesla", 1.000000000000000E+02, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[decatesla]": UBASE.UBASE("SI", "decatesla", 1.000000000000000E+01, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[daT]": UBASE.UBASE("SI", "decatesla", 1.000000000000000E+01, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[decitesla]": UBASE.UBASE("SI", "decitesla", 1.000000000000000E-01, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[dT]": UBASE.UBASE("SI", "decitesla", 1.000000000000000E-01, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[centitesla]": UBASE.UBASE("SI", "centitesla", 1.000000000000000E-02, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[cT]": UBASE.UBASE("SI", "centitesla", 1.000000000000000E-02, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[millitesla]": UBASE.UBASE("SI", "millitesla", 1.000000000000000E-03, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[NT]": UBASE.UBASE("SI", "millitesla", 1.000000000000000E-03, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[microtesla]": UBASE.UBASE("SI", "microtesla", 1.000000000000000E-06, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[uT]": UBASE.UBASE("SI", "microtesla", 1.000000000000000E-06, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[nanotesla]": UBASE.UBASE("SI", "nanotesla", 1.000000000000000E-09, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[nT]": UBASE.UBASE("SI", "nanotesla", 1.000000000000000E-09, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[picotesla]": UBASE.UBASE("SI", "picotesla", 1.000000000000000E-12, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[pT]": UBASE.UBASE("SI", "picotesla", 1.000000000000000E-12, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[femtotesla]": UBASE.UBASE("SI", "femtotesla", 1.000000000000000E-15, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[fT]": UBASE.UBASE("SI", "femtotesla", 1.000000000000000E-15, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[attotesla]": UBASE.UBASE("SI", "attotesla", 1.000000000000000E-18, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[aT]": UBASE.UBASE("SI", "attotesla", 1.000000000000000E-18, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[zeptotesla]": UBASE.UBASE("SI", "zeptotesla", 1.000000000000000E-21, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[zT]": UBASE.UBASE("SI", "zeptotesla", 1.000000000000000E-21, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[yoctotesla]": UBASE.UBASE("SI", "yoctotesla", 1.000000000000000E-24, "kg/s2.A", "M/T2.I", "1.0")})
        unit.update({"SI[yT]": UBASE.UBASE("SI", "yoctotesla", 1.000000000000000E-24, "kg/s2.A", "M/T2.I", "1.0")})
        self._map.update({"magneticFluxDensity": BaseSystem.BaseSystem("magneticFluxDensity", unit, "1.0")})

        unit.clear()


        unit.update({"a.u.[au-of-electric-field-strength-gradient]": UBASE.UBASE("a.u.", "au-of-electric-field-strength-gradient", 9.717362429207620E+21, "kg/s3.A", "M/T3.I", "1.0")})
        unit.update({"a.u.[ao]": UBASE.UBASE("a.u.", "au-of-electric-field-strength-gradient", 9.717362429207620E+21, "kg/s3.A", "M/T3.I", "1.0")})
        unit.update({"a.u.[b]": UBASE.UBASE("a.u.", "au-of-electric-field-strength-gradient", 9.717362429207620E+21, "kg/s3.A", "M/T3.I", "1.0")})
        unit.update({"a.u.[auefsg]": UBASE.UBASE("a.u.", "au-of-electric-field-strength-gradient", 9.717362429207620E+21, "kg/s3.A", "M/T3.I", "1.0")})
        unit.update({"cgs[townsend]": UBASE.UBASE("cgs", "townsend", 1.000000000000000E+21, "kg/s3.A", "M/T3.I", "1.0")})
        unit.update({"cgs[Td]": UBASE.UBASE("cgs", "townsend", 1.000000000000000E+21, "kg/s3.A", "M/T3.I", "1.0")})
        self._map.update({"electricFieldGradient": BaseSystem.BaseSystem("electricFieldGradient", unit, "1.0")})

        unit.clear()


        unit.update({"SI[weber-per-kilometer]": UBASE.UBASE("SI", "weber-per-kilometer", 1.000000000000000E-03, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"SI[Wb/km]": UBASE.UBASE("SI", "weber-per-kilometer", 1.000000000000000E-03, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"SI[weber-per-meter]": UBASE.UBASE("SI", "weber-per-meter", 1.000000000000000E+00, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"SI[Wb/m]": UBASE.UBASE("SI", "weber-per-meter", 1.000000000000000E+00, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"Si[weber-per-centimeter]": UBASE.UBASE("Si", "weber-per-centimeter", 1.000000000000000E+02, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"Si[Wb/cm]": UBASE.UBASE("Si", "weber-per-centimeter", 1.000000000000000E+02, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"Si[weber-per-millimeter]": UBASE.UBASE("Si", "weber-per-millimeter", 1.000000000000000E+03, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"Si[Wb/mm]": UBASE.UBASE("Si", "weber-per-millimeter", 1.000000000000000E+03, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"Si[weber-per-micrometer]": UBASE.UBASE("Si", "weber-per-micrometer", 1.000000000000000E+06, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"Si[Wb/um]": UBASE.UBASE("Si", "weber-per-micrometer", 1.000000000000000E+06, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"Si[weber-per-nanometer]": UBASE.UBASE("Si", "weber-per-nanometer", 1.000000000000000E+09, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"Si[Wb/nm]": UBASE.UBASE("Si", "weber-per-nanometer", 1.000000000000000E+09, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"Scientific[weber-per-mile]": UBASE.UBASE("Scientific", "weber-per-mile", 6.213711922373340E-04, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"Scientific[Wb/mi]": UBASE.UBASE("Scientific", "weber-per-mile", 6.213711922373340E-04, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"Scientific[weber-per-yard]": UBASE.UBASE("Scientific", "weber-per-yard", 1.093613298337710E+00, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"Scientific[Wb/yd]": UBASE.UBASE("Scientific", "weber-per-yard", 1.093613298337710E+00, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"Scientific[weber-per-foot]": UBASE.UBASE("Scientific", "weber-per-foot", 3.280839895013120E+00, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"Scientific[Wb/ft]": UBASE.UBASE("Scientific", "weber-per-foot", 3.280839895013120E+00, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"Scientific[weber-per-inch]": UBASE.UBASE("Scientific", "weber-per-inch", 3.937007874015750E+01, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        unit.update({"Scientific[Wb/in]": UBASE.UBASE("Scientific", "weber-per-inch", 3.937007874015750E+01, "kg.m/s2.A", "M.L/T2.I", "1.0")})
        self._map.update({"magneticPotential": BaseSystem.BaseSystem("magneticPotential", unit, "1.0")})

        unit.clear()


        unit.update({"SI[henry-per-kilometer]": UBASE.UBASE("SI", "henry-per-kilometer", 1.000000000000000E-03, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"SI[H/km]": UBASE.UBASE("SI", "henry-per-kilometer", 1.000000000000000E-03, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"SI[henry-per-meter]": UBASE.UBASE("SI", "henry-per-meter", 1.000000000000000E+00, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"SI[H/m]": UBASE.UBASE("SI", "henry-per-meter", 1.000000000000000E+00, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"SI[henry-per-centimeter]": UBASE.UBASE("SI", "henry-per-centimeter", 1.000000000000000E+02, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"SI[H/cm]": UBASE.UBASE("SI", "henry-per-centimeter", 1.000000000000000E+02, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"SI[henry-per-millimeter]": UBASE.UBASE("SI", "henry-per-millimeter", 1.000000000000000E+03, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"SI[H/mm]": UBASE.UBASE("SI", "henry-per-millimeter", 1.000000000000000E+03, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"SI[henry-per-micrometer]": UBASE.UBASE("SI", "henry-per-micrometer", 1.000000000000000E+06, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"SI[H/um]": UBASE.UBASE("SI", "henry-per-micrometer", 1.000000000000000E+06, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"SI[henry-per-nanometer]": UBASE.UBASE("SI", "henry-per-nanometer", 1.000000000000000E+09, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"SI[H/nm]": UBASE.UBASE("SI", "henry-per-nanometer", 1.000000000000000E+09, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"Scientific[henry-per-mile]": UBASE.UBASE("Scientific", "henry-per-mile", 6.213711922373340E-04, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"Scientific[H/mi]": UBASE.UBASE("Scientific", "henry-per-mile", 6.213711922373340E-04, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"Scientific[henry-per-yard]": UBASE.UBASE("Scientific", "henry-per-yard", 1.093613298337710E+00, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"Scientific[H/yd]": UBASE.UBASE("Scientific", "henry-per-yard", 1.093613298337710E+00, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"Scientific[henry-per-foot]": UBASE.UBASE("Scientific", "henry-per-foot", 3.280839895013120E+00, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"Scientific[H/ft]": UBASE.UBASE("Scientific", "henry-per-foot", 3.280839895013120E+00, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"Scientific[henry-per-inch]": UBASE.UBASE("Scientific", "henry-per-inch", 3.937007874015750E+01, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        unit.update({"Scientific[H/in]": UBASE.UBASE("Scientific", "henry-per-inch", 3.937007874015750E+01, "kg.m/s2.A2", "M.L/T2.I2", "1.0")})
        self._map.update({"magneticPermeability": BaseSystem.BaseSystem("magneticPermeability", unit, "1.0")})

        unit.clear()


 #EOF
